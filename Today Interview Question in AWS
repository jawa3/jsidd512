Differnce between SQS & SNS 
ANSWER :2. Message Delivery
Feature	      SQS	                                    SNS
Message Persistence	Yes (retained until processed)	No (lost if no subscriber)
Delivery Guarantee	At-Least-Once (may have duplicates)	At-Least-Once
Ordering (FIFO)	Supported (FIFO Queues)	Supported (FIFO Topics)
Retry Mechanism	Yes (Visibility Timeout)	No (depends on subscriber)

. Use Cases
SQS Use Cases:

Decoupling microservices.

Asynchronous task processing (e.g., order processing).

Buffering requests to prevent system overload.

SNS Use Cases:

Real-time notifications (e.g., email alerts, SMS).

Event-driven architectures (fanout to Lambda, SQS, etc.).

Broadcasting system events (e.g., CloudWatch alarms)

Difference Between Cloud Trail & Cloud Watch
Answer:
 Data Types (Technical Depth)
CloudTrail	                         CloudWatch
üìú API Call Logs (JSON)	üìä Metrics (CPU, Network, Custom)
üîç Management + Data Events	üìù Logs (App/OS logs via CloudWatch Logs)
‚è± Event History (90 days free)	‚ö° Real-time Streaming (Logs/Metrics)
Keyword Alert:

CloudTrail ‚Üí "Governance, Non-repudiation"

CloudWatch ‚Üí "Observability, Dashboards"

Types of Load Balanser:
Answer: Gateway Load Balancer (GWLB) , Network Load Balancer (NLB) , Application Load Balancer (ALB) , Elastic

Differnce between docker & kuberenets

What is Docker?

Docker is a containerization platform that allows developers to package applications and their dependencies into portable containers.

It simplifies app deployment on a single host by isolating environments.

What is Kubernetes?

Kubernetes is a container orchestration system designed to deploy, manage, and scale containerized applications across multiple hosts or clusters.

It handles scheduling, load balancing, scaling, and self-healing of containers.

Primary Difference:

Docker creates and runs containers.

Kubernetes manages and orchestrates containers at scale.

Scope:

Docker works on a single machine (or small clusters with Docker Swarm).

Kubernetes works across a cluster of machines (nodes) providing fault tolerance and high availability.

Scaling and Load Balancing:

Docker requires manual intervention or Docker Swarm for scaling.

Kubernetes provides automated scaling and built-in load balancing.

Networking:

Docker supports basic container networking on the host.

Kubernetes offers advanced networking, service discovery, and communication between pods across nodes.

Use Case:

Use Docker to containerize an app.

Use Kubernetes when you need to deploy and manage containers in production at scale.

